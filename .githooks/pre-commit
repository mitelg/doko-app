#!/usr/bin/env php
<?php

/**
 * .git/hooks/pre-commit
 *
 * This pre-commit hooks will check for PHP errors (lint), and make sure the
 * code is PSR-2 compliant.
 */
class PreCommitChecks
{
    /**
     * @var bool
     */
    private $error = false;

    /**
     * @return int
     */
    public function run()
    {
        $this->writeln();
        $this->writeln('Checking commit requirements', 0);
        $this->writeln();

        if ($this->isRebase()) {
            echo 'Not on branch' . PHP_EOL;

            return 0;
        }

        $this->runPhpLint($this->getCommittedFileList());
        $this->runPhpCsFixer($this->getCommittedFileList());

        if ($this->error) {
            $this->writeln("If you are ABSOLUTELY sure your code is correct, you can use 'git commit --no-verify' to bypass this validation", 0);
        }

        exit((int) $this->error);
    }

    /**
     * @param string $output
     * @param int    $level
     */
    private function writeln($output = '', $level = 1)
    {
        $this->write($output, $level);
        echo PHP_EOL;
    }

    /**
     * @param string $output
     * @param int    $level
     */
    private function write($output = '', $level = 1)
    {
        $spaces = $level * 3;

        echo str_pad($output, strlen($output) + $spaces, ' ', STR_PAD_LEFT);
    }

    /**
     * @return bool
     */
    private function isRebase()
    {
        $output = [];
        exec('git symbolic-ref --short -q HEAD', $output);

        return empty($output);
    }

    /**
     * @param string $extension
     * @return string[]
     */
    private function getCommittedFileList($extension = 'php')
    {
        exec("git diff --name-only --diff-filter=ACMRTUXB \"HEAD\" | grep -e '\." . $extension . "$'", $fileList);

        return $fileList;
    }

    /**
     * @param array $fileList
     */
    private function runPhpLint(array $fileList)
    {
        $this->writeln('# Checking php syntax');
        $this->writeln('> php -l');

        foreach ($fileList as $file) {
            exec('php -l ' . escapeshellarg($file) . ' 2> /dev/null', $output, $return);
            if ($return !== 0) {
                $this->writeln('- ' . $output[1], 2);
                $this->error = true;
            }
        }

        $this->writeln();
    }

    /**
     * @param array $fileList
     */
    private function runPhpCsFixer(array $fileList)
    {
        $this->writeln('# Checking php code style');
        $this->writeln('> php-cs-fixer fix -v --no-ansi --dry-run');

        if (!$this->isPHPCSFixerAvailable()) {
            $this->error = true;
            $this->writeln('- php-cs-fixer is NOT installed. Please install composer with dev dependencies.', 2);
            $this->writeln();

            return;
        }

        $fixes = [];
        foreach ($fileList as $file) {
            exec('./vendor/bin/php-cs-fixer fix -v --no-ansi --dry-run ' . escapeshellarg($file) . ' 2>&1', $output, $return);

            if ($return !== 0) {
                $this->writeln('- ' . preg_replace('#^(\s+)?\d\)\s#', '', $output[3]), 2);
                $fixes[] = './vendor/bin/php-cs-fixer fix -v ' . escapeshellarg($file);
                $this->error = true;
            }
        }

        if (!empty($fixes)) {
            $this->writeln();
            $this->writeln('Help:', 2);
            foreach ($fixes as $fix) {
                $this->writeln($fix, 3);
            }
        }

        $this->writeln();
    }

    /**
     * @return bool
     */
    private function isPHPCSFixerAvailable()
    {
        $output = [];
        $return = 0;
        exec('command -v ./vendor/bin/php-cs-fixer >/dev/null 2>&1', $output, $return);

        return !(bool) $return;
    }
}

$checks = new PreCommitChecks();
$checks->run();
